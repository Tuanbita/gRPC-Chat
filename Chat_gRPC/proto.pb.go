// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto.proto

It has these top-level messages:
	Empty
	UserLogin
	User
	Response
	Request
	Message
	Conversation
	AllConversation
	WaittingMessage
	AllMessages
	AllInfoUser
	ConversationDetail
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// login
type UserLogin struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *UserLogin) Reset()                    { *m = UserLogin{} }
func (m *UserLogin) String() string            { return proto1.CompactTextString(m) }
func (*UserLogin) ProtoMessage()               {}
func (*UserLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserLogin) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type User struct {
	Uid         uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password    string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Phone       string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Email       string `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	CreatedTime string `protobuf:"bytes,6,opt,name=createdTime" json:"createdTime,omitempty"`
	Active      bool   `protobuf:"varint,7,opt,name=active" json:"active,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto1.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *User) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *User) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

//
type Response struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Check    bool   `protobuf:"varint,2,opt,name=check" json:"check,omitempty"`
	Id       string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto1.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *Response) GetCheck() bool {
	if m != nil {
		return m.Check
	}
	return false
}

func (m *Response) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

//
type Request struct {
	Sessionkey string `protobuf:"bytes,1,opt,name=sessionkey" json:"sessionkey,omitempty"`
	Request    string `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Id         string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto1.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Request) GetSessionkey() string {
	if m != nil {
		return m.Sessionkey
	}
	return ""
}

func (m *Request) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

//
type Message struct {
	Mid         uint64 `protobuf:"varint,1,opt,name=mid" json:"mid,omitempty"`
	Sessionkey  string `protobuf:"bytes,2,opt,name=sessionkey" json:"sessionkey,omitempty"`
	Cid         string `protobuf:"bytes,3,opt,name=cid" json:"cid,omitempty"`
	Content     string `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
	CreatedTime string `protobuf:"bytes,4,opt,name=createdTime" json:"createdTime,omitempty"`
	Check       bool   `protobuf:"varint,6,opt,name=check" json:"check,omitempty"`
	FromName    string `protobuf:"bytes,7,opt,name=from_name,json=fromName" json:"from_name,omitempty"`
	ToUid       string `protobuf:"bytes,8,opt,name=toUid" json:"toUid,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Message) GetMid() uint64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Message) GetSessionkey() string {
	if m != nil {
		return m.Sessionkey
	}
	return ""
}

func (m *Message) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Message) GetCreatedTime() string {
	if m != nil {
		return m.CreatedTime
	}
	return ""
}

func (m *Message) GetCheck() bool {
	if m != nil {
		return m.Check
	}
	return false
}

func (m *Message) GetFromName() string {
	if m != nil {
		return m.FromName
	}
	return ""
}

func (m *Message) GetToUid() string {
	if m != nil {
		return m.ToUid
	}
	return ""
}

// tra ve cho client khi client chua co
type Conversation struct {
	Cid              string `protobuf:"bytes,1,opt,name=cid" json:"cid,omitempty"`
	ConversationName string `protobuf:"bytes,2,opt,name=ConversationName" json:"ConversationName,omitempty"`
	LastedTime       string `protobuf:"bytes,4,opt,name=LastedTime" json:"LastedTime,omitempty"`
	Sessionkey       string `protobuf:"bytes,5,opt,name=sessionkey" json:"sessionkey,omitempty"`
}

func (m *Conversation) Reset()                    { *m = Conversation{} }
func (m *Conversation) String() string            { return proto1.CompactTextString(m) }
func (*Conversation) ProtoMessage()               {}
func (*Conversation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Conversation) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Conversation) GetConversationName() string {
	if m != nil {
		return m.ConversationName
	}
	return ""
}

func (m *Conversation) GetLastedTime() string {
	if m != nil {
		return m.LastedTime
	}
	return ""
}

func (m *Conversation) GetSessionkey() string {
	if m != nil {
		return m.Sessionkey
	}
	return ""
}

type AllConversation struct {
	ListConversation []*Conversation `protobuf:"bytes,1,rep,name=listConversation" json:"listConversation,omitempty"`
}

func (m *AllConversation) Reset()                    { *m = AllConversation{} }
func (m *AllConversation) String() string            { return proto1.CompactTextString(m) }
func (*AllConversation) ProtoMessage()               {}
func (*AllConversation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AllConversation) GetListConversation() []*Conversation {
	if m != nil {
		return m.ListConversation
	}
	return nil
}

// tin nhan chua duoc nhan
type WaittingMessage struct {
	Waittingmess []*Message `protobuf:"bytes,1,rep,name=waittingmess" json:"waittingmess,omitempty"`
}

func (m *WaittingMessage) Reset()                    { *m = WaittingMessage{} }
func (m *WaittingMessage) String() string            { return proto1.CompactTextString(m) }
func (*WaittingMessage) ProtoMessage()               {}
func (*WaittingMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *WaittingMessage) GetWaittingmess() []*Message {
	if m != nil {
		return m.Waittingmess
	}
	return nil
}

// tat ca tin nhan
type AllMessages struct {
	Allmess []*Message `protobuf:"bytes,1,rep,name=allmess" json:"allmess,omitempty"`
}

func (m *AllMessages) Reset()                    { *m = AllMessages{} }
func (m *AllMessages) String() string            { return proto1.CompactTextString(m) }
func (*AllMessages) ProtoMessage()               {}
func (*AllMessages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AllMessages) GetAllmess() []*Message {
	if m != nil {
		return m.Allmess
	}
	return nil
}

// tra ve tat ca User theo dieu kien
type AllInfoUser struct {
	Alluser []*User `protobuf:"bytes,1,rep,name=alluser" json:"alluser,omitempty"`
}

func (m *AllInfoUser) Reset()                    { *m = AllInfoUser{} }
func (m *AllInfoUser) String() string            { return proto1.CompactTextString(m) }
func (*AllInfoUser) ProtoMessage()               {}
func (*AllInfoUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AllInfoUser) GetAlluser() []*User {
	if m != nil {
		return m.Alluser
	}
	return nil
}

type ConversationDetail struct {
	Sessionkey string   `protobuf:"bytes,3,opt,name=sessionkey" json:"sessionkey,omitempty"`
	Cid        string   `protobuf:"bytes,1,opt,name=cid" json:"cid,omitempty"`
	Uid        []string `protobuf:"bytes,2,rep,name=uid" json:"uid,omitempty"`
}

func (m *ConversationDetail) Reset()                    { *m = ConversationDetail{} }
func (m *ConversationDetail) String() string            { return proto1.CompactTextString(m) }
func (*ConversationDetail) ProtoMessage()               {}
func (*ConversationDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ConversationDetail) GetSessionkey() string {
	if m != nil {
		return m.Sessionkey
	}
	return ""
}

func (m *ConversationDetail) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *ConversationDetail) GetUid() []string {
	if m != nil {
		return m.Uid
	}
	return nil
}

func init() {
	proto1.RegisterType((*Empty)(nil), "Empty")
	proto1.RegisterType((*UserLogin)(nil), "UserLogin")
	proto1.RegisterType((*User)(nil), "User")
	proto1.RegisterType((*Response)(nil), "Response")
	proto1.RegisterType((*Request)(nil), "Request")
	proto1.RegisterType((*Message)(nil), "Message")
	proto1.RegisterType((*Conversation)(nil), "Conversation")
	proto1.RegisterType((*AllConversation)(nil), "AllConversation")
	proto1.RegisterType((*WaittingMessage)(nil), "WaittingMessage")
	proto1.RegisterType((*AllMessages)(nil), "AllMessages")
	proto1.RegisterType((*AllInfoUser)(nil), "AllInfoUser")
	proto1.RegisterType((*ConversationDetail)(nil), "ConversationDetail")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatgRPC service

type ChatgRPCClient interface {
	// rpc LoadMess(Request) returns(WaittingMessage){}
	// dieu huong chat
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (ChatgRPC_RouteChatClient, error)
	// dang ki thanh vien
	Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	// dang nhap
	Login(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*Response, error)
	// logout
	Logout(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// kiem tra co user tren database hay ko, truyen vao la 1 sessionkey
	CheckUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// load tin nhan chua duoc nhan, truyen vao la 1 sessionkey
	LoadMess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*WaittingMessage, error)
	// return uid
	GetId(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// tra ve cid
	CreateConversation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// dau vao la uid tra ve danh sach Conversation
	GetAllConversation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllConversation, error)
	// add n uid to conversation
	AddUidToConversation(ctx context.Context, in *ConversationDetail, opts ...grpc.CallOption) (*Response, error)
	// load tat ca tin nhan
	LoadAllMess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllMessages, error)
	// ket ban
	AddFriend(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// lay danh sach tat ca user
	GetListUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllInfoUser, error)
	// lay danh sach ban be
	GetListFriend(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllInfoUser, error)
	// lay thong tin 1 user
	GetInfoUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*User, error)
}

type chatgRPCClient struct {
	cc *grpc.ClientConn
}

func NewChatgRPCClient(cc *grpc.ClientConn) ChatgRPCClient {
	return &chatgRPCClient{cc}
}

func (c *chatgRPCClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (ChatgRPC_RouteChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatgRPC_serviceDesc.Streams[0], c.cc, "/ChatgRPC/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatgRPCRouteChatClient{stream}
	return x, nil
}

type ChatgRPC_RouteChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatgRPCRouteChatClient struct {
	grpc.ClientStream
}

func (x *chatgRPCRouteChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatgRPCRouteChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatgRPCClient) Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ChatgRPC/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) Login(ctx context.Context, in *UserLogin, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ChatgRPC/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) Logout(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ChatgRPC/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) CheckUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ChatgRPC/CheckUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) LoadMess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*WaittingMessage, error) {
	out := new(WaittingMessage)
	err := grpc.Invoke(ctx, "/ChatgRPC/LoadMess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) GetId(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ChatgRPC/GetId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) CreateConversation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ChatgRPC/CreateConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) GetAllConversation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllConversation, error) {
	out := new(AllConversation)
	err := grpc.Invoke(ctx, "/ChatgRPC/GetAllConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) AddUidToConversation(ctx context.Context, in *ConversationDetail, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ChatgRPC/AddUidToConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) LoadAllMess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllMessages, error) {
	out := new(AllMessages)
	err := grpc.Invoke(ctx, "/ChatgRPC/LoadAllMess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) AddFriend(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ChatgRPC/AddFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) GetListUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllInfoUser, error) {
	out := new(AllInfoUser)
	err := grpc.Invoke(ctx, "/ChatgRPC/GetListUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) GetListFriend(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllInfoUser, error) {
	out := new(AllInfoUser)
	err := grpc.Invoke(ctx, "/ChatgRPC/GetListFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatgRPCClient) GetInfoUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/ChatgRPC/GetInfoUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatgRPC service

type ChatgRPCServer interface {
	// rpc LoadMess(Request) returns(WaittingMessage){}
	// dieu huong chat
	RouteChat(ChatgRPC_RouteChatServer) error
	// dang ki thanh vien
	Register(context.Context, *User) (*Response, error)
	// dang nhap
	Login(context.Context, *UserLogin) (*Response, error)
	// logout
	Logout(context.Context, *Request) (*Response, error)
	// kiem tra co user tren database hay ko, truyen vao la 1 sessionkey
	CheckUser(context.Context, *Request) (*Response, error)
	// load tin nhan chua duoc nhan, truyen vao la 1 sessionkey
	LoadMess(context.Context, *Request) (*WaittingMessage, error)
	// return uid
	GetId(context.Context, *Request) (*Response, error)
	// tra ve cid
	CreateConversation(context.Context, *Request) (*Response, error)
	// dau vao la uid tra ve danh sach Conversation
	GetAllConversation(context.Context, *Request) (*AllConversation, error)
	// add n uid to conversation
	AddUidToConversation(context.Context, *ConversationDetail) (*Response, error)
	// load tat ca tin nhan
	LoadAllMess(context.Context, *Request) (*AllMessages, error)
	// ket ban
	AddFriend(context.Context, *Request) (*Response, error)
	// lay danh sach tat ca user
	GetListUser(context.Context, *Request) (*AllInfoUser, error)
	// lay danh sach ban be
	GetListFriend(context.Context, *Request) (*AllInfoUser, error)
	// lay thong tin 1 user
	GetInfoUser(context.Context, *Request) (*User, error)
}

func RegisterChatgRPCServer(s *grpc.Server, srv ChatgRPCServer) {
	s.RegisterService(&_ChatgRPC_serviceDesc, srv)
}

func _ChatgRPC_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatgRPCServer).RouteChat(&chatgRPCRouteChatServer{stream})
}

type ChatgRPC_RouteChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatgRPCRouteChatServer struct {
	grpc.ServerStream
}

func (x *chatgRPCRouteChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatgRPCRouteChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatgRPC_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).Register(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).Login(ctx, req.(*UserLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).Logout(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/CheckUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).CheckUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_LoadMess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).LoadMess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/LoadMess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).LoadMess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).GetId(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).CreateConversation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_GetAllConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).GetAllConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/GetAllConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).GetAllConversation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_AddUidToConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).AddUidToConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/AddUidToConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).AddUidToConversation(ctx, req.(*ConversationDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_LoadAllMess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).LoadAllMess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/LoadAllMess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).LoadAllMess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).AddFriend(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_GetListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).GetListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/GetListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).GetListUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_GetListFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).GetListFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/GetListFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).GetListFriend(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatgRPC_GetInfoUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatgRPCServer).GetInfoUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatgRPC/GetInfoUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatgRPCServer).GetInfoUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatgRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ChatgRPC",
	HandlerType: (*ChatgRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ChatgRPC_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ChatgRPC_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ChatgRPC_Logout_Handler,
		},
		{
			MethodName: "CheckUser",
			Handler:    _ChatgRPC_CheckUser_Handler,
		},
		{
			MethodName: "LoadMess",
			Handler:    _ChatgRPC_LoadMess_Handler,
		},
		{
			MethodName: "GetId",
			Handler:    _ChatgRPC_GetId_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _ChatgRPC_CreateConversation_Handler,
		},
		{
			MethodName: "GetAllConversation",
			Handler:    _ChatgRPC_GetAllConversation_Handler,
		},
		{
			MethodName: "AddUidToConversation",
			Handler:    _ChatgRPC_AddUidToConversation_Handler,
		},
		{
			MethodName: "LoadAllMess",
			Handler:    _ChatgRPC_LoadAllMess_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _ChatgRPC_AddFriend_Handler,
		},
		{
			MethodName: "GetListUser",
			Handler:    _ChatgRPC_GetListUser_Handler,
		},
		{
			MethodName: "GetListFriend",
			Handler:    _ChatgRPC_GetListFriend_Handler,
		},
		{
			MethodName: "GetInfoUser",
			Handler:    _ChatgRPC_GetInfoUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteChat",
			Handler:       _ChatgRPC_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto.proto",
}

func init() { proto1.RegisterFile("proto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xdb, 0x6e, 0xd3, 0x4c,
	0x10, 0x8e, 0x73, 0xb2, 0x33, 0x69, 0xff, 0x46, 0xfb, 0x57, 0xc8, 0x2a, 0x52, 0x6b, 0xad, 0x84,
	0x1a, 0x0e, 0xb2, 0xa0, 0xdc, 0xc0, 0x15, 0x8a, 0x02, 0x54, 0x95, 0x4c, 0x85, 0x4c, 0x2b, 0xb8,
	0x43, 0x26, 0xbb, 0x4d, 0x57, 0xb5, 0xbd, 0xc1, 0xbb, 0x69, 0xd5, 0x77, 0xe0, 0x79, 0x78, 0x10,
	0x9e, 0x80, 0x47, 0x41, 0xbb, 0x5e, 0x3b, 0x3e, 0x10, 0x6e, 0xa2, 0x9d, 0x6f, 0x66, 0xbe, 0x99,
	0xfd, 0x76, 0xc6, 0x81, 0xf1, 0x2a, 0xe3, 0x92, 0xfb, 0xfa, 0x17, 0xdb, 0x30, 0x78, 0x97, 0xac,
	0xe4, 0x3d, 0x9e, 0xc3, 0xe8, 0x52, 0xd0, 0x2c, 0xe0, 0x4b, 0x96, 0xa2, 0x03, 0x70, 0xd6, 0x82,
	0x66, 0x69, 0x94, 0x50, 0xd7, 0xf2, 0xac, 0xe9, 0x28, 0x2c, 0x6d, 0xe5, 0x5b, 0x45, 0x42, 0xdc,
	0xf1, 0x8c, 0xb8, 0xdd, 0xdc, 0x57, 0xd8, 0xf8, 0xa7, 0x05, 0x7d, 0xc5, 0x82, 0x26, 0xd0, 0x5b,
	0x33, 0xa2, 0x73, 0xfb, 0xa1, 0x3a, 0xd6, 0x28, 0xbb, 0xff, 0xa0, 0xec, 0xd5, 0x29, 0xd1, 0x3e,
	0x0c, 0x56, 0xd7, 0x3c, 0xa5, 0x6e, 0x5f, 0x3b, 0x72, 0x43, 0xa1, 0x34, 0x89, 0x58, 0xec, 0x0e,
	0x72, 0x54, 0x1b, 0xc8, 0x83, 0xf1, 0x22, 0xa3, 0x91, 0xa4, 0xe4, 0x82, 0x25, 0xd4, 0x1d, 0x6a,
	0x5f, 0x15, 0x42, 0x0f, 0x60, 0x18, 0x2d, 0x24, 0xbb, 0xa5, 0xae, 0xed, 0x59, 0x53, 0x27, 0x34,
	0x16, 0x0e, 0xc0, 0x09, 0xa9, 0x58, 0xf1, 0x54, 0xe8, 0x6e, 0x32, 0x73, 0x2e, 0x2e, 0x5f, 0xd8,
	0xaa, 0xee, 0xe2, 0x9a, 0x2e, 0x6e, 0xf4, 0x15, 0x9c, 0x30, 0x37, 0xd0, 0x7f, 0xd0, 0x65, 0x45,
	0xe7, 0x5d, 0x46, 0xf0, 0x27, 0xb0, 0x43, 0xfa, 0x7d, 0x4d, 0x85, 0x44, 0x87, 0x00, 0x82, 0x0a,
	0xc1, 0x78, 0x7a, 0x43, 0xef, 0x0d, 0x5d, 0x05, 0x41, 0x2e, 0xd8, 0x59, 0x1e, 0x6a, 0x54, 0x29,
	0xcc, 0x16, 0xe9, 0x2f, 0x0b, 0xec, 0x0f, 0x54, 0x88, 0x68, 0x49, 0x95, 0xbc, 0xc9, 0x46, 0xde,
	0x84, 0x91, 0x46, 0x9d, 0x6e, 0xab, 0xce, 0x04, 0x7a, 0x8b, 0x92, 0x4e, 0x1d, 0x55, 0xe5, 0x05,
	0x4f, 0x25, 0x4d, 0xa5, 0x11, 0xb1, 0x30, 0x9b, 0x32, 0xf6, 0xdb, 0x32, 0x96, 0x32, 0x0c, 0xab,
	0x32, 0x3c, 0x84, 0xd1, 0x55, 0xc6, 0x93, 0xaf, 0xfa, 0x8d, 0xed, 0x5c, 0x39, 0x05, 0x9c, 0x47,
	0x79, 0x8a, 0xe4, 0x97, 0x8c, 0xb8, 0x4e, 0xfe, 0x62, 0xda, 0xc0, 0x3f, 0x2c, 0xd8, 0x99, 0xf3,
	0xf4, 0x96, 0x66, 0x22, 0x92, 0x8c, 0xa7, 0x45, 0x9f, 0xd6, 0xa6, 0xcf, 0x27, 0x30, 0xa9, 0x46,
	0x9c, 0x6f, 0x06, 0xa8, 0x85, 0x2b, 0x15, 0x82, 0x48, 0xd4, 0x1b, 0xaf, 0x20, 0x0d, 0x95, 0x06,
	0x4d, 0x95, 0x70, 0x00, 0x7b, 0xb3, 0x38, 0xae, 0x35, 0xf4, 0x1a, 0x26, 0x31, 0x13, 0xb2, 0x8a,
	0xb9, 0x96, 0xd7, 0x9b, 0x8e, 0x4f, 0x76, 0xfd, 0x2a, 0x18, 0xb6, 0xc2, 0xf0, 0x1b, 0xd8, 0xfb,
	0x1c, 0x31, 0x29, 0x59, 0xba, 0x2c, 0x1e, 0xee, 0x19, 0xec, 0xdc, 0x19, 0x28, 0xa1, 0x42, 0x18,
	0x26, 0xc7, 0x37, 0xfe, 0xb0, 0xe6, 0xc5, 0x2f, 0x60, 0x3c, 0x8b, 0x63, 0xe3, 0x13, 0x08, 0x83,
	0x1d, 0xc5, 0xf1, 0x5f, 0xf3, 0x0a, 0x07, 0xf6, 0x75, 0xca, 0x59, 0x7a, 0xc5, 0xf5, 0x1e, 0x1e,
	0xe9, 0x14, 0xb5, 0x68, 0x26, 0x65, 0xe0, 0x2b, 0x3c, 0x2c, 0x50, 0xfc, 0x05, 0x50, 0xb5, 0xe7,
	0xb7, 0x54, 0xaa, 0x45, 0xaa, 0xeb, 0xd4, 0xdb, 0x36, 0x4d, 0x95, 0x57, 0x32, 0x0b, 0xdf, 0xf5,
	0x7a, 0x0a, 0x59, 0x33, 0x72, 0xf2, 0xbb, 0x0f, 0xce, 0xfc, 0x3a, 0x92, 0xcb, 0xf0, 0xe3, 0x1c,
	0x3d, 0x82, 0x51, 0xc8, 0xd7, 0x92, 0x2a, 0x00, 0x95, 0x6d, 0x1f, 0x94, 0x27, 0xdc, 0x99, 0x5a,
	0xcf, 0x2d, 0x74, 0xa8, 0xd6, 0x70, 0xc9, 0x84, 0xa4, 0x19, 0xca, 0x3b, 0x3d, 0x18, 0xf9, 0xc5,
	0x62, 0xe2, 0x0e, 0xf2, 0x60, 0x90, 0x7f, 0xa0, 0xc0, 0x2f, 0x3f, 0x56, 0xf5, 0x88, 0x23, 0x18,
	0x06, 0x7c, 0xc9, 0xd7, 0xaa, 0x8a, 0xd9, 0xc1, 0x7a, 0x00, 0x86, 0xd1, 0x5c, 0x4d, 0xab, 0x96,
	0x67, 0x4b, 0xcc, 0x14, 0x9c, 0x80, 0x47, 0x44, 0xf5, 0x56, 0x09, 0x99, 0xf8, 0x8d, 0xd7, 0xc4,
	0x1d, 0x74, 0x08, 0x83, 0x53, 0x2a, 0xcf, 0xc8, 0x36, 0xa6, 0xa7, 0x80, 0xe6, 0x7a, 0x6f, 0x6a,
	0x33, 0xb5, 0x25, 0xf8, 0x04, 0xd0, 0x29, 0x95, 0xcd, 0x01, 0xac, 0x36, 0xd0, 0xf0, 0xe1, 0x0e,
	0x7a, 0x05, 0xfb, 0x33, 0x42, 0x2e, 0x19, 0xb9, 0xe0, 0xb5, 0xac, 0xff, 0xfd, 0xf6, 0xb3, 0xd6,
	0xab, 0x1d, 0xc3, 0x58, 0x5d, 0xd2, 0x0c, 0x58, 0xa5, 0xcc, 0x8e, 0x5f, 0x19, 0xba, 0x5c, 0xb1,
	0x19, 0x21, 0xef, 0x33, 0x46, 0xd3, 0xad, 0xf7, 0x3c, 0x86, 0xf1, 0x29, 0x95, 0x01, 0x13, 0xb2,
	0xa1, 0xab, 0x26, 0x2b, 0xc6, 0x11, 0x77, 0xd0, 0x63, 0xd8, 0x35, 0x81, 0x2d, 0xc2, 0x66, 0xa8,
	0xa7, 0x39, 0xcb, 0x51, 0xde, 0x04, 0xe6, 0x93, 0x81, 0x3b, 0xdf, 0x86, 0xfa, 0x3f, 0xec, 0xe5,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x0d, 0xd4, 0x99, 0xd2, 0x06, 0x00, 0x00,
}
